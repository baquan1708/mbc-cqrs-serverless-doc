{
  "Learn how to use and customize authentication and authorization.": "認証と認可の使用方法とカスタマイズ方法を学びます。",
  "Authentication": "認証",
  "Understanding authentication is crucial for protecting your application's data. This page will guide you through what mbc-cqrs-serverless features to use to implement auth.": "認証を理解することは、アプリケーションのデータを保護するために重要です。このページでは、認証を実装するためにどの mbc-cqrs-serverless 機能を使用するかを説明します。",
  "Before starting, it helps to break down the process into three concepts:": "開始する前にプロセスを3つの概念に分類すると役立ちます。",
  "Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.": "ユーザが本人であるかどうかを確認します。ユーザは、ユーザ名やパスワード等自身が持っているもので自分の身元を証明する必要があります。",
  "Session Management": "セッション管理",
  "Tracks the user's auth state across requests.": "リクエスト全体でユーザー認証状態を追跡します。",
  "Authorization": "認可",
  "Decides what routes and data the user can access.": "ユーザがアクセスできるルートとデータを決定します。",
  "The examples on this page walk through an [Amazon Cognito](https://aws.amazon.com/cognito/) app client, you can invoke API operations for authentication and authorization of your users.": "このページの例ではユーザ認証を[Amazon Cognito](https://aws.amazon.com/cognito/) で行いAPI呼出時に認可を行っています。",
  "We recommend you use [AWS Amplify](https://docs.amplify.aws/nextjs/) to integrate Amazon Cognito with your web and mobile apps. <br/> Once authenticated, the server will issue a JWT that can be sent as a [bearer token](https://datatracker.ietf.org/doc/html/rfc6750) in an authorization header on subsequent requests to prove authentication.": "[AWS Amplify](https://docs.amplify.aws/nextjs/) を使用して、Amazon Cognito をウェブおよびモバイルアプリと統合することをお勧めします。 <br/> 認証が完了すると、サーバーは認証を証明するために、後続のリクエストの認証ヘッダーで [ベアラー トークン](https://datatracker.ietf.org/doc/html/rfc6750) として送信できる JWT を発行します 。",
  "Once a user is authenticated, you can implement authorization to control what the user can access and do within your application. Authorization is orthogonal and independent from authentication. However, authorization requires an authentication mechanism. <br/> We use optimistic types of authorization check: Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. Specifically, we implement Role-Based Access Control (RBAC).": "ユーザーが認証されると、ユーザーがアプリケーション内でアクセスおよび実行できる内容を制御するための認可を実装できます。認可は直交しており、認証とは独立しています。ただし、認可には認証メカニズムが必要です。 <br/> 当社はオプティミスティックタイプの認可チェックを使用します。ユーザーがルートにアクセスするか、Cookie に保存されているセッションデータを使用してアクションを実行することが認可されているかどうかをチェックします。具体的には、ロールベースのアクセス制御 (RBAC) を実装します。",
  "First, let's create a Role enum representing roles in the system:": "まずはじめにシステム内のロールを列挙型として定義しましょう。",
  "In more sophisticated systems, you may store roles within a database, or pull them from the external authentication provider.": "より洗練されたシステムではロールをデータベースに保存したり外部認証プロバイダーからロールを取得することも出来ます。",
  "Now that we have a custom Roles enum, we can use it to any route handler.": "任意のルートハンドラーで先程のカスタムロールを使用する事が出来ます。",
  "Then, we create a helper function that extracts information from the context.": "そして、コンテキストから情報を抽出するヘルパー関数を作成します。",
  "Finally, we create a CustomRoleGuard class which will compare the roles assigned to the current user to the actual roles required by the current route being processed.": "最後に現在のユーザに割り当てられているロールと現在処理中のルートで必要なロールを比較するカスタムロールガードクラスを作成します。"
}