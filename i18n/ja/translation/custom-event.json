{
  "Learn how to create a custom event in your application and register a handler to respond to this event.": "アプリケーションでカスタム イベントを作成し、このイベントに応答するハンドラーを登録する方法を学びます。\n",
  "Custom event": "カスタムイベント",
  "This guide will walk you through the process of creating a custom event in your application and registering a handler to respond to this event. Events are a powerful way to decouple your application’s logic, allowing different parts of your system to communicate without being tightly integrated.": "このガイドでは、アプリケーションでカスタム イベントを作成し、このイベントに応答するハンドラーを登録するプロセスについて説明します。イベントは、アプリケーションのロジックを分離する強力な方法であり、緊密に統合されずにシステムのさまざまな部分が通信できるようになります。",
  "First, you need to create a custom event that implements the `IEvent` interface from `@mbc-cqrs-serverless/core`. Depending on the event, you should typically implement a second interface from the `aws-lambda` library, such as `SNSEventRecord`, `SQSRecord`, `DynamoDBRecord`, `EventBridgeEvent`, `S3EventRecord`, etc.": "まず、`@mbc-cqrs-serverless/core` から `IEvent` インターフェイスを実装するカスタム イベントを作成する必要があります。イベントに応じて、通常は「SNSEventRecord」、「SQSRecord」、「DynamoDBRecord」、「EventBridgeEvent」、「S3EventRecord」などの「aws-lambda」ライブラリから 2 番目のインターフェイスを実装する必要があります。",
  "In the following example, we will create a custom S3 event and register this event handler.": "次の例では、カスタム S3 イベントを作成し、このイベント ハンドラーを登録します。",
  "With `CustomS3EventRecord` in place, you can now create a handler for this event.": "`CustomS3EventRecord` を配置すると、このイベントのハンドラーを作成できるようになります。",
  "As you can see, `CustomS3EventHandler` is a class annotated with the `@EventHandler(T)` decorator and implements the `IEventHandler<T>` interface.": "ご覧のとおり、`CustomS3EventHandler` は `@EventHandler(T)` デコレータで注釈が付けられたクラスであり、`IEventHandler<T>` インターフェイスを実装しています。",
  "Finally, you need to create a CustomEventFactory that extends `DefaultEventFactory` and is annotated with the `@EventFactory()` decorator.": "最後に、`DefaultEventFactory` を拡張し、`@EventFactory()` デコレータで注釈が付けられた CustomEventFactory を作成する必要があります。",
  "Similarly, you could override other methods of the `DefaultEventFactory` class to create and handle custom events.": "\n同様に、`DefaultEventFactory` クラスの他のメソッドをオーバーライドして、カスタム イベントを作成および処理することができます。"
}